version: '2'
services:
  # Nginx serves requests on port 80/443 through rediecting
  # to flask and other web applications.
  nginx:
    image: nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx:/etc/nginx/conf.d
      - ./certs:/etc/nginx/certs
    # FIXME: For some reason this is required now, else nginx runs
    #        into timeouts when talking to ROS.
    network_mode: "host"
  
  # dockergen updates nginx configuration when new docker container appear,
  # and notifies nginx about the change.
  dockergen:
    image: jwilder/docker-gen
    container_name: docker-gen
    command: -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl
      - ./certs:/etc/nginx/certs
      - nginx:/etc/nginx/conf.d
  
  # an interface to the docker API of the host
  dockerbridge:
    image: "openease/dockerbridge"
    container_name: dockerbridge
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - OPENEASE_EPISODE_DATA=${OPENEASE_EPISODE_DATA}
      - EASE_DEBUG=${EASE_DEBUG}

  # postgres is used to store e.g. user accounts, roles,
  # data displayed in the webpage
  postgres:
    build: ./openease_postgres
    container_name: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=docker
  
  # mongo holds episodic memory data
  # TODO: spawn one for each user after an episode 
  #       has been selected, and only load the data of
  #       that specific episode.
  #       - use multirepo to hold imported mongo data
  #       - then use the multirepo folder as volume for that mongo instance
  mongo:
    image: "mongo"
    container_name: mongo
    network_mode: bridge
    volumes:
      - mongo:/data/db
    #ports:
    #  - "27017:27017"

  # a volume that holds a secret key
  secret_init:
    image: "busybox"
    command: sh -c '< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c 64 > /etc/ease_secret/secret'
    volumes:
      - secret:/etc/ease_secret

  # a volume that holds CSS code
  openease_css:
    build: ./openease_css
    volumes:
      - openease_css:/opt/webapp/webrob/static/css

  # a volume that holds JS code
  openease_core:
    build: ./openease_js
    volumes:
      - openease_core:/opt/webapp/webrob/static/lib
  
  # a volume that holds JS code to interface the D3 library
  chart_vis:
    image: "openease/d3"
    volumes:
      - chart_vis:/opt/webapp/webrob/static/lib/chart
  
  # a volume that holds JS code to interface the THREEJS library for ROS marker visualization
  marker_vis:
    image: "openease/threejs"
    volumes:
      - marker_vis:/opt/webapp/webrob/static/lib/vis
  
  # the openEASE flask webapp
  openease:
    build: ./openease_flask
    container_name: openease
    # NOTE: wait until postgres is available before calling runserver.py
    command: /opt/webapp/wait.sh postgres python /opt/webapp/runserver.py
    ports:
      - "5000:5000"
    links:
      - postgres
      - dockerbridge
      - mongo
      # only for development with PyCharm
      # - openease_css
      # - nginx
      # - dockergen
      # - secret_init
      # - openease_core
      # - chart_vis
      # - marker_vis
    volumes:
      - secret:/etc/ease_secret:ro
      - lft:/tmp/openEASE/dockerbridge
      - openease_core:/opt/webapp/webrob/static/lib
      - openease_css:/opt/webapp/webrob/static/css
      - chart_vis:/opt/webapp/webrob/static/lib/chart # TODO: use multirepo instead
      - marker_vis:/opt/webapp/webrob/static/lib/vis  # TODO: use multirepo instead
      - episodes_data:/episodes                       # TODO: use multirepo instead
      - meshes:/home/ros/mesh_data                    # TODO: use multirepo instead
      - openease_html:/opt/webapp/webrob/templates
      - openease_icons:/opt/webapp/webrob/static/icons
      - openease_images:/opt/webapp/webrob/static/images
      - openease_logos:/opt/webapp/webrob/static/logos
      - openease_python_config:/opt/webapp/webrob/config
      - openease_python_docker:/opt/webapp/webrob/docker
      - openease_python_models:/opt/webapp/webrob/models
      - openease_python_pages:/opt/webapp/webrob/pages
      - openease_python_startup:/opt/webapp/webrob/startup
      - openease_python_test:/opt/webapp/webrob/test
      - openease_python_utility:/opt/webapp/webrob/utility
    environment:
      # these are for docker-gen to recognize this container
      - VIRTUAL_HOST=openease
      - VIRTUAL_PORT=5000
      - EASE_DEBUG=false
      # Workaround for container using legacy Docker links
      - POSTGRES_PORT_5432_TCP_ADDR=postgres
      - POSTGRES_PORT_5432_TCP_PORT=5432
      - DOCKERBRIDGE_PORT_5001_TCP_ADDR=dockerbridge
      - DOCKERBRIDGE_PORT_5001_TCP_PORT=5001
      - MONGO_PORT_27017_TCP_ADDR=172.17.42.1
      - MONGO_PORT_27017_TCP_PORT=27017
      - OPENEASE_ADMIN_PASSWORD=${OPENEASE_ADMIN_PASSWORD}
      - OPENEASE_MAIL_USERNAME=${OPENEASE_MAIL_USERNAME}
      - OPENEASE_MAIL_PASSWORD=${OPENEASE_MAIL_PASSWORD}
      - OPENEASE_MESHES=${OPENEASE_MESHES}
      - OPENEASE_ROS_DISTRIBUTION=${OPENEASE_ROS_DISTRIBUTION}
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_APP_SECRET=${GITHUB_APP_SECRET}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - TWITTER_APP_ID=${TWITTER_APP_ID}
      - TWITTER_APP_SECRET=${TWITTER_APP_SECRET}
      - GOOGLE_APP_SECRET=${GOOGLE_APP_SECRET}
      - GOOGLE_APP_ID=${GOOGLE_APP_ID}
  #docker_compose_ui:
    #restart: always
    #image: francescou/docker-compose-ui:1.13.0
    #container_name: docker_compose_ui
    #hostname: docker_compose_ui
    #working_dir: /opt/docker-compose-projects/
    #environment:
    #- 'WEB_CONSOLE_PATTERN=/web-console/?cid={containerName}&cmd={command}'
    #volumes:
    #- /var/run/docker.sock:/var/run/docker.sock
  #web_console:
    #image: bitbull/docker-exec-web-console
    #environment:
    #- 'CONTEXT_PATH=/web-console/'
    #read_only: true
    #restart: always
    #volumes:
    #- /var/run/docker.sock:/var/run/docker.sock
volumes:
  episodes_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_EPISODE_DATA}
  # large file transfer volume
  lft:
  # secret key volume
  secret:
  # sql data volume
  postgres:
  # nginx configuration
  nginx:
  # openEASE CSS code
  openease_css:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_css
  # openEASE HTML code
  openease_html:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/templates
  # openEASE icons, images and logos
  openease_icons:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/static/icons
  openease_images:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/static/images
  openease_logos:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/static/logos
  # openEASE python modules
  openease_python_config:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/config
  openease_python_docker:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/docker
  openease_python_models:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/models
  openease_python_pages:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/pages
  openease_python_startup:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/startup
  openease_python_test:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/test
  openease_python_utility:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_flask/webrob/utility
  # openEASE JS code
  openease_core:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${OPENEASE_WEBSERVER_DEV}/openease_js
  # openEASE D3/THREEJS code
  chart_vis:  # TODO: use multirepo instead
  marker_vis: # TODO: use multirepo instead
  # mongo & mesh data volume
  mongo:  # TODO: use multirepo instead
  meshes: # TODO: use multirepo instead
